// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// NodeBalances is an autogenerated mock type for the NodeBalances type
type NodeBalances struct {
	mock.Mock
}

type NodeBalances_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeBalances) EXPECT() *NodeBalances_Expecter {
	return &NodeBalances_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: address, operator
func (_m *NodeBalances) Cleanup(address string, operator string) {
	_m.Called(address, operator)
}

// NodeBalances_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type NodeBalances_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - address string
//   - operator string
func (_e *NodeBalances_Expecter) Cleanup(address interface{}, operator interface{}) *NodeBalances_Cleanup_Call {
	return &NodeBalances_Cleanup_Call{Call: _e.mock.On("Cleanup", address, operator)}
}

func (_c *NodeBalances_Cleanup_Call) Run(run func(address string, operator string)) *NodeBalances_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *NodeBalances_Cleanup_Call) Return() *NodeBalances_Cleanup_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBalances_Cleanup_Call) RunAndReturn(run func(string, string)) *NodeBalances_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// SetBalance provides a mock function with given fields: balance, address, operator
func (_m *NodeBalances) SetBalance(balance uint64, address string, operator string) {
	_m.Called(balance, address, operator)
}

// NodeBalances_SetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBalance'
type NodeBalances_SetBalance_Call struct {
	*mock.Call
}

// SetBalance is a helper method to define mock.On call
//   - balance uint64
//   - address string
//   - operator string
func (_e *NodeBalances_Expecter) SetBalance(balance interface{}, address interface{}, operator interface{}) *NodeBalances_SetBalance_Call {
	return &NodeBalances_SetBalance_Call{Call: _e.mock.On("SetBalance", balance, address, operator)}
}

func (_c *NodeBalances_SetBalance_Call) Run(run func(balance uint64, address string, operator string)) *NodeBalances_SetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NodeBalances_SetBalance_Call) Return() *NodeBalances_SetBalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBalances_SetBalance_Call) RunAndReturn(run func(uint64, string, string)) *NodeBalances_SetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeBalances creates a new instance of NodeBalances. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeBalances(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeBalances {
	mock := &NodeBalances{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
