// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	metrics "github.com/smartcontractkit/chainlink-solana/pkg/monitoring/metrics"
	mock "github.com/stretchr/testify/mock"
)

// ReportObservations is an autogenerated mock type for the ReportObservations type
type ReportObservations struct {
	mock.Mock
}

type ReportObservations_Expecter struct {
	mock *mock.Mock
}

func (_m *ReportObservations) EXPECT() *ReportObservations_Expecter {
	return &ReportObservations_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: feedInput
func (_m *ReportObservations) Cleanup(feedInput metrics.FeedInput) {
	_m.Called(feedInput)
}

// ReportObservations_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type ReportObservations_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - feedInput metrics.FeedInput
func (_e *ReportObservations_Expecter) Cleanup(feedInput interface{}) *ReportObservations_Cleanup_Call {
	return &ReportObservations_Cleanup_Call{Call: _e.mock.On("Cleanup", feedInput)}
}

func (_c *ReportObservations_Cleanup_Call) Run(run func(feedInput metrics.FeedInput)) *ReportObservations_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metrics.FeedInput))
	})
	return _c
}

func (_c *ReportObservations_Cleanup_Call) Return() *ReportObservations_Cleanup_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReportObservations_Cleanup_Call) RunAndReturn(run func(metrics.FeedInput)) *ReportObservations_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// SetCount provides a mock function with given fields: count, feedInput
func (_m *ReportObservations) SetCount(count uint8, feedInput metrics.FeedInput) {
	_m.Called(count, feedInput)
}

// ReportObservations_SetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCount'
type ReportObservations_SetCount_Call struct {
	*mock.Call
}

// SetCount is a helper method to define mock.On call
//   - count uint8
//   - feedInput metrics.FeedInput
func (_e *ReportObservations_Expecter) SetCount(count interface{}, feedInput interface{}) *ReportObservations_SetCount_Call {
	return &ReportObservations_SetCount_Call{Call: _e.mock.On("SetCount", count, feedInput)}
}

func (_c *ReportObservations_SetCount_Call) Run(run func(count uint8, feedInput metrics.FeedInput)) *ReportObservations_SetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8), args[1].(metrics.FeedInput))
	})
	return _c
}

func (_c *ReportObservations_SetCount_Call) Return() *ReportObservations_SetCount_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReportObservations_SetCount_Call) RunAndReturn(run func(uint8, metrics.FeedInput)) *ReportObservations_SetCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewReportObservations creates a new instance of ReportObservations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportObservations(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportObservations {
	mock := &ReportObservations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
