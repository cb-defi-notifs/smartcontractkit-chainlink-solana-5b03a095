// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	metrics "github.com/smartcontractkit/chainlink-solana/pkg/monitoring/metrics"
	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// FeedBalances is an autogenerated mock type for the FeedBalances type
type FeedBalances struct {
	mock.Mock
}

type FeedBalances_Expecter struct {
	mock *mock.Mock
}

func (_m *FeedBalances) EXPECT() *FeedBalances_Expecter {
	return &FeedBalances_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: balanceAccountName, feedInput
func (_m *FeedBalances) Cleanup(balanceAccountName string, feedInput metrics.FeedInput) {
	_m.Called(balanceAccountName, feedInput)
}

// FeedBalances_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type FeedBalances_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - balanceAccountName string
//   - feedInput metrics.FeedInput
func (_e *FeedBalances_Expecter) Cleanup(balanceAccountName interface{}, feedInput interface{}) *FeedBalances_Cleanup_Call {
	return &FeedBalances_Cleanup_Call{Call: _e.mock.On("Cleanup", balanceAccountName, feedInput)}
}

func (_c *FeedBalances_Cleanup_Call) Run(run func(balanceAccountName string, feedInput metrics.FeedInput)) *FeedBalances_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(metrics.FeedInput))
	})
	return _c
}

func (_c *FeedBalances_Cleanup_Call) Return() *FeedBalances_Cleanup_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeedBalances_Cleanup_Call) RunAndReturn(run func(string, metrics.FeedInput)) *FeedBalances_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: balanceAccountName
func (_m *FeedBalances) Exists(balanceAccountName string) (*prometheus.GaugeVec, bool) {
	ret := _m.Called(balanceAccountName)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *prometheus.GaugeVec
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*prometheus.GaugeVec, bool)); ok {
		return rf(balanceAccountName)
	}
	if rf, ok := ret.Get(0).(func(string) *prometheus.GaugeVec); ok {
		r0 = rf(balanceAccountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheus.GaugeVec)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(balanceAccountName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// FeedBalances_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type FeedBalances_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - balanceAccountName string
func (_e *FeedBalances_Expecter) Exists(balanceAccountName interface{}) *FeedBalances_Exists_Call {
	return &FeedBalances_Exists_Call{Call: _e.mock.On("Exists", balanceAccountName)}
}

func (_c *FeedBalances_Exists_Call) Run(run func(balanceAccountName string)) *FeedBalances_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FeedBalances_Exists_Call) Return(_a0 *prometheus.GaugeVec, _a1 bool) *FeedBalances_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeedBalances_Exists_Call) RunAndReturn(run func(string) (*prometheus.GaugeVec, bool)) *FeedBalances_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// SetBalance provides a mock function with given fields: balance, balanceAccountName, feedInput
func (_m *FeedBalances) SetBalance(balance uint64, balanceAccountName string, feedInput metrics.FeedInput) {
	_m.Called(balance, balanceAccountName, feedInput)
}

// FeedBalances_SetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBalance'
type FeedBalances_SetBalance_Call struct {
	*mock.Call
}

// SetBalance is a helper method to define mock.On call
//   - balance uint64
//   - balanceAccountName string
//   - feedInput metrics.FeedInput
func (_e *FeedBalances_Expecter) SetBalance(balance interface{}, balanceAccountName interface{}, feedInput interface{}) *FeedBalances_SetBalance_Call {
	return &FeedBalances_SetBalance_Call{Call: _e.mock.On("SetBalance", balance, balanceAccountName, feedInput)}
}

func (_c *FeedBalances_SetBalance_Call) Run(run func(balance uint64, balanceAccountName string, feedInput metrics.FeedInput)) *FeedBalances_SetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(string), args[2].(metrics.FeedInput))
	})
	return _c
}

func (_c *FeedBalances_SetBalance_Call) Return() *FeedBalances_SetBalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *FeedBalances_SetBalance_Call) RunAndReturn(run func(uint64, string, metrics.FeedInput)) *FeedBalances_SetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeedBalances creates a new instance of FeedBalances. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedBalances(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedBalances {
	mock := &FeedBalances{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
