// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	rpc "github.com/gagliardetto/solana-go/rpc"
	multinode "github.com/smartcontractkit/chainlink-solana/pkg/solana/client/multinode"
	mock "github.com/stretchr/testify/mock"

	solana "github.com/gagliardetto/solana-go"
)

// ReaderWriter is an autogenerated mock type for the ReaderWriter type
type ReaderWriter struct {
	mock.Mock
}

type ReaderWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *ReaderWriter) EXPECT() *ReaderWriter_Expecter {
	return &ReaderWriter_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function with given fields: ctx, addr
func (_m *ReaderWriter) Balance(ctx context.Context, addr solana.PublicKey) (uint64, error) {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey) (uint64, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey) uint64); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type ReaderWriter_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - ctx context.Context
//   - addr solana.PublicKey
func (_e *ReaderWriter_Expecter) Balance(ctx interface{}, addr interface{}) *ReaderWriter_Balance_Call {
	return &ReaderWriter_Balance_Call{Call: _e.mock.On("Balance", ctx, addr)}
}

func (_c *ReaderWriter_Balance_Call) Run(run func(ctx context.Context, addr solana.PublicKey)) *ReaderWriter_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(solana.PublicKey))
	})
	return _c
}

func (_c *ReaderWriter_Balance_Call) Return(_a0 uint64, _a1 error) *ReaderWriter_Balance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_Balance_Call) RunAndReturn(run func(context.Context, solana.PublicKey) (uint64, error)) *ReaderWriter_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// ChainID provides a mock function with given fields: ctx
func (_m *ReaderWriter) ChainID(ctx context.Context) (multinode.StringID, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 multinode.StringID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (multinode.StringID, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) multinode.StringID); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(multinode.StringID)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type ReaderWriter_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ReaderWriter_Expecter) ChainID(ctx interface{}) *ReaderWriter_ChainID_Call {
	return &ReaderWriter_ChainID_Call{Call: _e.mock.On("ChainID", ctx)}
}

func (_c *ReaderWriter_ChainID_Call) Run(run func(ctx context.Context)) *ReaderWriter_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReaderWriter_ChainID_Call) Return(_a0 multinode.StringID, _a1 error) *ReaderWriter_ChainID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_ChainID_Call) RunAndReturn(run func(context.Context) (multinode.StringID, error)) *ReaderWriter_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountInfoWithOpts provides a mock function with given fields: ctx, addr, opts
func (_m *ReaderWriter) GetAccountInfoWithOpts(ctx context.Context, addr solana.PublicKey, opts *rpc.GetAccountInfoOpts) (*rpc.GetAccountInfoResult, error) {
	ret := _m.Called(ctx, addr, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountInfoWithOpts")
	}

	var r0 *rpc.GetAccountInfoResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, *rpc.GetAccountInfoOpts) (*rpc.GetAccountInfoResult, error)); ok {
		return rf(ctx, addr, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, *rpc.GetAccountInfoOpts) *rpc.GetAccountInfoResult); ok {
		r0 = rf(ctx, addr, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetAccountInfoResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, *rpc.GetAccountInfoOpts) error); ok {
		r1 = rf(ctx, addr, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetAccountInfoWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountInfoWithOpts'
type ReaderWriter_GetAccountInfoWithOpts_Call struct {
	*mock.Call
}

// GetAccountInfoWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - addr solana.PublicKey
//   - opts *rpc.GetAccountInfoOpts
func (_e *ReaderWriter_Expecter) GetAccountInfoWithOpts(ctx interface{}, addr interface{}, opts interface{}) *ReaderWriter_GetAccountInfoWithOpts_Call {
	return &ReaderWriter_GetAccountInfoWithOpts_Call{Call: _e.mock.On("GetAccountInfoWithOpts", ctx, addr, opts)}
}

func (_c *ReaderWriter_GetAccountInfoWithOpts_Call) Run(run func(ctx context.Context, addr solana.PublicKey, opts *rpc.GetAccountInfoOpts)) *ReaderWriter_GetAccountInfoWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(solana.PublicKey), args[2].(*rpc.GetAccountInfoOpts))
	})
	return _c
}

func (_c *ReaderWriter_GetAccountInfoWithOpts_Call) Return(_a0 *rpc.GetAccountInfoResult, _a1 error) *ReaderWriter_GetAccountInfoWithOpts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetAccountInfoWithOpts_Call) RunAndReturn(run func(context.Context, solana.PublicKey, *rpc.GetAccountInfoOpts) (*rpc.GetAccountInfoResult, error)) *ReaderWriter_GetAccountInfoWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields: ctx, slot
func (_m *ReaderWriter) GetBlock(ctx context.Context, slot uint64) (*rpc.GetBlockResult, error) {
	ret := _m.Called(ctx, slot)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *rpc.GetBlockResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*rpc.GetBlockResult, error)); ok {
		return rf(ctx, slot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *rpc.GetBlockResult); ok {
		r0 = rf(ctx, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetBlockResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type ReaderWriter_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - slot uint64
func (_e *ReaderWriter_Expecter) GetBlock(ctx interface{}, slot interface{}) *ReaderWriter_GetBlock_Call {
	return &ReaderWriter_GetBlock_Call{Call: _e.mock.On("GetBlock", ctx, slot)}
}

func (_c *ReaderWriter_GetBlock_Call) Run(run func(ctx context.Context, slot uint64)) *ReaderWriter_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ReaderWriter_GetBlock_Call) Return(_a0 *rpc.GetBlockResult, _a1 error) *ReaderWriter_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetBlock_Call) RunAndReturn(run func(context.Context, uint64) (*rpc.GetBlockResult, error)) *ReaderWriter_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocks provides a mock function with given fields: ctx, startSlot, endSlot
func (_m *ReaderWriter) GetBlocks(ctx context.Context, startSlot uint64, endSlot *uint64) (rpc.BlocksResult, error) {
	ret := _m.Called(ctx, startSlot, endSlot)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocks")
	}

	var r0 rpc.BlocksResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) (rpc.BlocksResult, error)); ok {
		return rf(ctx, startSlot, endSlot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) rpc.BlocksResult); ok {
		r0 = rf(ctx, startSlot, endSlot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpc.BlocksResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *uint64) error); ok {
		r1 = rf(ctx, startSlot, endSlot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocks'
type ReaderWriter_GetBlocks_Call struct {
	*mock.Call
}

// GetBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - startSlot uint64
//   - endSlot *uint64
func (_e *ReaderWriter_Expecter) GetBlocks(ctx interface{}, startSlot interface{}, endSlot interface{}) *ReaderWriter_GetBlocks_Call {
	return &ReaderWriter_GetBlocks_Call{Call: _e.mock.On("GetBlocks", ctx, startSlot, endSlot)}
}

func (_c *ReaderWriter_GetBlocks_Call) Run(run func(ctx context.Context, startSlot uint64, endSlot *uint64)) *ReaderWriter_GetBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*uint64))
	})
	return _c
}

func (_c *ReaderWriter_GetBlocks_Call) Return(_a0 rpc.BlocksResult, _a1 error) *ReaderWriter_GetBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetBlocks_Call) RunAndReturn(run func(context.Context, uint64, *uint64) (rpc.BlocksResult, error)) *ReaderWriter_GetBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksWithLimit provides a mock function with given fields: ctx, startSlot, limit
func (_m *ReaderWriter) GetBlocksWithLimit(ctx context.Context, startSlot uint64, limit uint64) (*rpc.BlocksResult, error) {
	ret := _m.Called(ctx, startSlot, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksWithLimit")
	}

	var r0 *rpc.BlocksResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) (*rpc.BlocksResult, error)); ok {
		return rf(ctx, startSlot, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) *rpc.BlocksResult); ok {
		r0 = rf(ctx, startSlot, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.BlocksResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, startSlot, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetBlocksWithLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksWithLimit'
type ReaderWriter_GetBlocksWithLimit_Call struct {
	*mock.Call
}

// GetBlocksWithLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - startSlot uint64
//   - limit uint64
func (_e *ReaderWriter_Expecter) GetBlocksWithLimit(ctx interface{}, startSlot interface{}, limit interface{}) *ReaderWriter_GetBlocksWithLimit_Call {
	return &ReaderWriter_GetBlocksWithLimit_Call{Call: _e.mock.On("GetBlocksWithLimit", ctx, startSlot, limit)}
}

func (_c *ReaderWriter_GetBlocksWithLimit_Call) Run(run func(ctx context.Context, startSlot uint64, limit uint64)) *ReaderWriter_GetBlocksWithLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *ReaderWriter_GetBlocksWithLimit_Call) Return(_a0 *rpc.BlocksResult, _a1 error) *ReaderWriter_GetBlocksWithLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetBlocksWithLimit_Call) RunAndReturn(run func(context.Context, uint64, uint64) (*rpc.BlocksResult, error)) *ReaderWriter_GetBlocksWithLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeeForMessage provides a mock function with given fields: ctx, msg
func (_m *ReaderWriter) GetFeeForMessage(ctx context.Context, msg string) (uint64, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for GetFeeForMessage")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetFeeForMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeForMessage'
type ReaderWriter_GetFeeForMessage_Call struct {
	*mock.Call
}

// GetFeeForMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
func (_e *ReaderWriter_Expecter) GetFeeForMessage(ctx interface{}, msg interface{}) *ReaderWriter_GetFeeForMessage_Call {
	return &ReaderWriter_GetFeeForMessage_Call{Call: _e.mock.On("GetFeeForMessage", ctx, msg)}
}

func (_c *ReaderWriter_GetFeeForMessage_Call) Run(run func(ctx context.Context, msg string)) *ReaderWriter_GetFeeForMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ReaderWriter_GetFeeForMessage_Call) Return(_a0 uint64, _a1 error) *ReaderWriter_GetFeeForMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetFeeForMessage_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *ReaderWriter_GetFeeForMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx
func (_m *ReaderWriter) GetLatestBlock(ctx context.Context) (*rpc.GetBlockResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *rpc.GetBlockResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rpc.GetBlockResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rpc.GetBlockResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetBlockResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type ReaderWriter_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ReaderWriter_Expecter) GetLatestBlock(ctx interface{}) *ReaderWriter_GetLatestBlock_Call {
	return &ReaderWriter_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx)}
}

func (_c *ReaderWriter_GetLatestBlock_Call) Run(run func(ctx context.Context)) *ReaderWriter_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReaderWriter_GetLatestBlock_Call) Return(_a0 *rpc.GetBlockResult, _a1 error) *ReaderWriter_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetLatestBlock_Call) RunAndReturn(run func(context.Context) (*rpc.GetBlockResult, error)) *ReaderWriter_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeight provides a mock function with given fields: ctx
func (_m *ReaderWriter) GetLatestBlockHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetLatestBlockHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeight'
type ReaderWriter_GetLatestBlockHeight_Call struct {
	*mock.Call
}

// GetLatestBlockHeight is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ReaderWriter_Expecter) GetLatestBlockHeight(ctx interface{}) *ReaderWriter_GetLatestBlockHeight_Call {
	return &ReaderWriter_GetLatestBlockHeight_Call{Call: _e.mock.On("GetLatestBlockHeight", ctx)}
}

func (_c *ReaderWriter_GetLatestBlockHeight_Call) Run(run func(ctx context.Context)) *ReaderWriter_GetLatestBlockHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReaderWriter_GetLatestBlockHeight_Call) Return(_a0 uint64, _a1 error) *ReaderWriter_GetLatestBlockHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetLatestBlockHeight_Call) RunAndReturn(run func(context.Context) (uint64, error)) *ReaderWriter_GetLatestBlockHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignaturesForAddressWithOpts provides a mock function with given fields: ctx, addr, opts
func (_m *ReaderWriter) GetSignaturesForAddressWithOpts(ctx context.Context, addr solana.PublicKey, opts *rpc.GetSignaturesForAddressOpts) ([]*rpc.TransactionSignature, error) {
	ret := _m.Called(ctx, addr, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetSignaturesForAddressWithOpts")
	}

	var r0 []*rpc.TransactionSignature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, *rpc.GetSignaturesForAddressOpts) ([]*rpc.TransactionSignature, error)); ok {
		return rf(ctx, addr, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, *rpc.GetSignaturesForAddressOpts) []*rpc.TransactionSignature); ok {
		r0 = rf(ctx, addr, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.TransactionSignature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, solana.PublicKey, *rpc.GetSignaturesForAddressOpts) error); ok {
		r1 = rf(ctx, addr, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetSignaturesForAddressWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignaturesForAddressWithOpts'
type ReaderWriter_GetSignaturesForAddressWithOpts_Call struct {
	*mock.Call
}

// GetSignaturesForAddressWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - addr solana.PublicKey
//   - opts *rpc.GetSignaturesForAddressOpts
func (_e *ReaderWriter_Expecter) GetSignaturesForAddressWithOpts(ctx interface{}, addr interface{}, opts interface{}) *ReaderWriter_GetSignaturesForAddressWithOpts_Call {
	return &ReaderWriter_GetSignaturesForAddressWithOpts_Call{Call: _e.mock.On("GetSignaturesForAddressWithOpts", ctx, addr, opts)}
}

func (_c *ReaderWriter_GetSignaturesForAddressWithOpts_Call) Run(run func(ctx context.Context, addr solana.PublicKey, opts *rpc.GetSignaturesForAddressOpts)) *ReaderWriter_GetSignaturesForAddressWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(solana.PublicKey), args[2].(*rpc.GetSignaturesForAddressOpts))
	})
	return _c
}

func (_c *ReaderWriter_GetSignaturesForAddressWithOpts_Call) Return(_a0 []*rpc.TransactionSignature, _a1 error) *ReaderWriter_GetSignaturesForAddressWithOpts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetSignaturesForAddressWithOpts_Call) RunAndReturn(run func(context.Context, solana.PublicKey, *rpc.GetSignaturesForAddressOpts) ([]*rpc.TransactionSignature, error)) *ReaderWriter_GetSignaturesForAddressWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx, txHash, opts
func (_m *ReaderWriter) GetTransaction(ctx context.Context, txHash solana.Signature, opts *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error) {
	ret := _m.Called(ctx, txHash, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *rpc.GetTransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, solana.Signature, *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error)); ok {
		return rf(ctx, txHash, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, solana.Signature, *rpc.GetTransactionOpts) *rpc.GetTransactionResult); ok {
		r0 = rf(ctx, txHash, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetTransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, solana.Signature, *rpc.GetTransactionOpts) error); ok {
		r1 = rf(ctx, txHash, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type ReaderWriter_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash solana.Signature
//   - opts *rpc.GetTransactionOpts
func (_e *ReaderWriter_Expecter) GetTransaction(ctx interface{}, txHash interface{}, opts interface{}) *ReaderWriter_GetTransaction_Call {
	return &ReaderWriter_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx, txHash, opts)}
}

func (_c *ReaderWriter_GetTransaction_Call) Run(run func(ctx context.Context, txHash solana.Signature, opts *rpc.GetTransactionOpts)) *ReaderWriter_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(solana.Signature), args[2].(*rpc.GetTransactionOpts))
	})
	return _c
}

func (_c *ReaderWriter_GetTransaction_Call) Return(_a0 *rpc.GetTransactionResult, _a1 error) *ReaderWriter_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_GetTransaction_Call) RunAndReturn(run func(context.Context, solana.Signature, *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error)) *ReaderWriter_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// LatestBlockhash provides a mock function with given fields: ctx
func (_m *ReaderWriter) LatestBlockhash(ctx context.Context) (*rpc.GetLatestBlockhashResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LatestBlockhash")
	}

	var r0 *rpc.GetLatestBlockhashResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rpc.GetLatestBlockhashResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rpc.GetLatestBlockhashResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetLatestBlockhashResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_LatestBlockhash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestBlockhash'
type ReaderWriter_LatestBlockhash_Call struct {
	*mock.Call
}

// LatestBlockhash is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ReaderWriter_Expecter) LatestBlockhash(ctx interface{}) *ReaderWriter_LatestBlockhash_Call {
	return &ReaderWriter_LatestBlockhash_Call{Call: _e.mock.On("LatestBlockhash", ctx)}
}

func (_c *ReaderWriter_LatestBlockhash_Call) Run(run func(ctx context.Context)) *ReaderWriter_LatestBlockhash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReaderWriter_LatestBlockhash_Call) Return(_a0 *rpc.GetLatestBlockhashResult, _a1 error) *ReaderWriter_LatestBlockhash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_LatestBlockhash_Call) RunAndReturn(run func(context.Context) (*rpc.GetLatestBlockhashResult, error)) *ReaderWriter_LatestBlockhash_Call {
	_c.Call.Return(run)
	return _c
}

// SendTx provides a mock function with given fields: ctx, tx
func (_m *ReaderWriter) SendTx(ctx context.Context, tx *solana.Transaction) (solana.Signature, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 solana.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *solana.Transaction) (solana.Signature, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *solana.Transaction) solana.Signature); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(solana.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *solana.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_SendTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTx'
type ReaderWriter_SendTx_Call struct {
	*mock.Call
}

// SendTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *solana.Transaction
func (_e *ReaderWriter_Expecter) SendTx(ctx interface{}, tx interface{}) *ReaderWriter_SendTx_Call {
	return &ReaderWriter_SendTx_Call{Call: _e.mock.On("SendTx", ctx, tx)}
}

func (_c *ReaderWriter_SendTx_Call) Run(run func(ctx context.Context, tx *solana.Transaction)) *ReaderWriter_SendTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*solana.Transaction))
	})
	return _c
}

func (_c *ReaderWriter_SendTx_Call) Return(_a0 solana.Signature, _a1 error) *ReaderWriter_SendTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_SendTx_Call) RunAndReturn(run func(context.Context, *solana.Transaction) (solana.Signature, error)) *ReaderWriter_SendTx_Call {
	_c.Call.Return(run)
	return _c
}

// SignatureStatuses provides a mock function with given fields: ctx, sigs
func (_m *ReaderWriter) SignatureStatuses(ctx context.Context, sigs []solana.Signature) ([]*rpc.SignatureStatusesResult, error) {
	ret := _m.Called(ctx, sigs)

	if len(ret) == 0 {
		panic("no return value specified for SignatureStatuses")
	}

	var r0 []*rpc.SignatureStatusesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []solana.Signature) ([]*rpc.SignatureStatusesResult, error)); ok {
		return rf(ctx, sigs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []solana.Signature) []*rpc.SignatureStatusesResult); ok {
		r0 = rf(ctx, sigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.SignatureStatusesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []solana.Signature) error); ok {
		r1 = rf(ctx, sigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_SignatureStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignatureStatuses'
type ReaderWriter_SignatureStatuses_Call struct {
	*mock.Call
}

// SignatureStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - sigs []solana.Signature
func (_e *ReaderWriter_Expecter) SignatureStatuses(ctx interface{}, sigs interface{}) *ReaderWriter_SignatureStatuses_Call {
	return &ReaderWriter_SignatureStatuses_Call{Call: _e.mock.On("SignatureStatuses", ctx, sigs)}
}

func (_c *ReaderWriter_SignatureStatuses_Call) Run(run func(ctx context.Context, sigs []solana.Signature)) *ReaderWriter_SignatureStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]solana.Signature))
	})
	return _c
}

func (_c *ReaderWriter_SignatureStatuses_Call) Return(_a0 []*rpc.SignatureStatusesResult, _a1 error) *ReaderWriter_SignatureStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_SignatureStatuses_Call) RunAndReturn(run func(context.Context, []solana.Signature) ([]*rpc.SignatureStatusesResult, error)) *ReaderWriter_SignatureStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateTx provides a mock function with given fields: ctx, tx, opts
func (_m *ReaderWriter) SimulateTx(ctx context.Context, tx *solana.Transaction, opts *rpc.SimulateTransactionOpts) (*rpc.SimulateTransactionResult, error) {
	ret := _m.Called(ctx, tx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SimulateTx")
	}

	var r0 *rpc.SimulateTransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *solana.Transaction, *rpc.SimulateTransactionOpts) (*rpc.SimulateTransactionResult, error)); ok {
		return rf(ctx, tx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *solana.Transaction, *rpc.SimulateTransactionOpts) *rpc.SimulateTransactionResult); ok {
		r0 = rf(ctx, tx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.SimulateTransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *solana.Transaction, *rpc.SimulateTransactionOpts) error); ok {
		r1 = rf(ctx, tx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_SimulateTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateTx'
type ReaderWriter_SimulateTx_Call struct {
	*mock.Call
}

// SimulateTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *solana.Transaction
//   - opts *rpc.SimulateTransactionOpts
func (_e *ReaderWriter_Expecter) SimulateTx(ctx interface{}, tx interface{}, opts interface{}) *ReaderWriter_SimulateTx_Call {
	return &ReaderWriter_SimulateTx_Call{Call: _e.mock.On("SimulateTx", ctx, tx, opts)}
}

func (_c *ReaderWriter_SimulateTx_Call) Run(run func(ctx context.Context, tx *solana.Transaction, opts *rpc.SimulateTransactionOpts)) *ReaderWriter_SimulateTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*solana.Transaction), args[2].(*rpc.SimulateTransactionOpts))
	})
	return _c
}

func (_c *ReaderWriter_SimulateTx_Call) Return(_a0 *rpc.SimulateTransactionResult, _a1 error) *ReaderWriter_SimulateTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_SimulateTx_Call) RunAndReturn(run func(context.Context, *solana.Transaction, *rpc.SimulateTransactionOpts) (*rpc.SimulateTransactionResult, error)) *ReaderWriter_SimulateTx_Call {
	_c.Call.Return(run)
	return _c
}

// SlotHeight provides a mock function with given fields: ctx
func (_m *ReaderWriter) SlotHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SlotHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReaderWriter_SlotHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlotHeight'
type ReaderWriter_SlotHeight_Call struct {
	*mock.Call
}

// SlotHeight is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ReaderWriter_Expecter) SlotHeight(ctx interface{}) *ReaderWriter_SlotHeight_Call {
	return &ReaderWriter_SlotHeight_Call{Call: _e.mock.On("SlotHeight", ctx)}
}

func (_c *ReaderWriter_SlotHeight_Call) Run(run func(ctx context.Context)) *ReaderWriter_SlotHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReaderWriter_SlotHeight_Call) Return(_a0 uint64, _a1 error) *ReaderWriter_SlotHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReaderWriter_SlotHeight_Call) RunAndReturn(run func(context.Context) (uint64, error)) *ReaderWriter_SlotHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewReaderWriter creates a new instance of ReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReaderWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReaderWriter {
	mock := &ReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
