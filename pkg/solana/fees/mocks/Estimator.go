// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Estimator is an autogenerated mock type for the Estimator type
type Estimator struct {
	mock.Mock
}

type Estimator_Expecter struct {
	mock *mock.Mock
}

func (_m *Estimator) EXPECT() *Estimator_Expecter {
	return &Estimator_Expecter{mock: &_m.Mock}
}

// BaseComputeUnitPrice provides a mock function with given fields:
func (_m *Estimator) BaseComputeUnitPrice() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseComputeUnitPrice")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Estimator_BaseComputeUnitPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseComputeUnitPrice'
type Estimator_BaseComputeUnitPrice_Call struct {
	*mock.Call
}

// BaseComputeUnitPrice is a helper method to define mock.On call
func (_e *Estimator_Expecter) BaseComputeUnitPrice() *Estimator_BaseComputeUnitPrice_Call {
	return &Estimator_BaseComputeUnitPrice_Call{Call: _e.mock.On("BaseComputeUnitPrice")}
}

func (_c *Estimator_BaseComputeUnitPrice_Call) Run(run func()) *Estimator_BaseComputeUnitPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Estimator_BaseComputeUnitPrice_Call) Return(_a0 uint64) *Estimator_BaseComputeUnitPrice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Estimator_BaseComputeUnitPrice_Call) RunAndReturn(run func() uint64) *Estimator_BaseComputeUnitPrice_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Estimator) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Estimator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Estimator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Estimator_Expecter) Close() *Estimator_Close_Call {
	return &Estimator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Estimator_Close_Call) Run(run func()) *Estimator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Estimator_Close_Call) Return(_a0 error) *Estimator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Estimator_Close_Call) RunAndReturn(run func() error) *Estimator_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *Estimator) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Estimator_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Estimator_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Estimator_Expecter) Start(_a0 interface{}) *Estimator_Start_Call {
	return &Estimator_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *Estimator_Start_Call) Run(run func(_a0 context.Context)) *Estimator_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Estimator_Start_Call) Return(_a0 error) *Estimator_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Estimator_Start_Call) RunAndReturn(run func(context.Context) error) *Estimator_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewEstimator creates a new instance of Estimator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEstimator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Estimator {
	mock := &Estimator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
