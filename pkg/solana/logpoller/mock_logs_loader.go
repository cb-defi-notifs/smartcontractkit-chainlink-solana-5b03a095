// Code generated by mockery v2.43.2. DO NOT EDIT.

package logpoller

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockLogsLoader is an autogenerated mock type for the logsLoader type
type mockLogsLoader struct {
	mock.Mock
}

type mockLogsLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogsLoader) EXPECT() *mockLogsLoader_Expecter {
	return &mockLogsLoader_Expecter{mock: &_m.Mock}
}

// BackfillForAddresses provides a mock function with given fields: ctx, addresses, fromSlot, toSlot
func (_m *mockLogsLoader) BackfillForAddresses(ctx context.Context, addresses []PublicKey, fromSlot uint64, toSlot uint64) (<-chan Block, func(), error) {
	ret := _m.Called(ctx, addresses, fromSlot, toSlot)

	if len(ret) == 0 {
		panic("no return value specified for BackfillForAddresses")
	}

	var r0 <-chan Block
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []PublicKey, uint64, uint64) (<-chan Block, func(), error)); ok {
		return rf(ctx, addresses, fromSlot, toSlot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []PublicKey, uint64, uint64) <-chan Block); ok {
		r0 = rf(ctx, addresses, fromSlot, toSlot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []PublicKey, uint64, uint64) func()); ok {
		r1 = rf(ctx, addresses, fromSlot, toSlot)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []PublicKey, uint64, uint64) error); ok {
		r2 = rf(ctx, addresses, fromSlot, toSlot)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockLogsLoader_BackfillForAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackfillForAddresses'
type mockLogsLoader_BackfillForAddresses_Call struct {
	*mock.Call
}

// BackfillForAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - addresses []PublicKey
//   - fromSlot uint64
//   - toSlot uint64
func (_e *mockLogsLoader_Expecter) BackfillForAddresses(ctx interface{}, addresses interface{}, fromSlot interface{}, toSlot interface{}) *mockLogsLoader_BackfillForAddresses_Call {
	return &mockLogsLoader_BackfillForAddresses_Call{Call: _e.mock.On("BackfillForAddresses", ctx, addresses, fromSlot, toSlot)}
}

func (_c *mockLogsLoader_BackfillForAddresses_Call) Run(run func(ctx context.Context, addresses []PublicKey, fromSlot uint64, toSlot uint64)) *mockLogsLoader_BackfillForAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]PublicKey), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *mockLogsLoader_BackfillForAddresses_Call) Return(orderedBlocks <-chan Block, cleanUp func(), err error) *mockLogsLoader_BackfillForAddresses_Call {
	_c.Call.Return(orderedBlocks, cleanUp, err)
	return _c
}

func (_c *mockLogsLoader_BackfillForAddresses_Call) RunAndReturn(run func(context.Context, []PublicKey, uint64, uint64) (<-chan Block, func(), error)) *mockLogsLoader_BackfillForAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogsLoader creates a new instance of mockLogsLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogsLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogsLoader {
	mock := &mockLogsLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
