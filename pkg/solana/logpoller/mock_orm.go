// Code generated by mockery v2.43.2. DO NOT EDIT.

package logpoller

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockORM is an autogenerated mock type for the ORM type
type MockORM struct {
	mock.Mock
}

type MockORM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockORM) EXPECT() *MockORM_Expecter {
	return &MockORM_Expecter{mock: &_m.Mock}
}

// ChainID provides a mock function with given fields:
func (_m *MockORM) ChainID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockORM_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type MockORM_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *MockORM_Expecter) ChainID() *MockORM_ChainID_Call {
	return &MockORM_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *MockORM_ChainID_Call) Run(run func()) *MockORM_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockORM_ChainID_Call) Return(_a0 string) *MockORM_ChainID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockORM_ChainID_Call) RunAndReturn(run func() string) *MockORM_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFilters provides a mock function with given fields: ctx, filters
func (_m *MockORM) DeleteFilters(ctx context.Context, filters map[int64]Filter) error {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[int64]Filter) error); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockORM_DeleteFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFilters'
type MockORM_DeleteFilters_Call struct {
	*mock.Call
}

// DeleteFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - filters map[int64]Filter
func (_e *MockORM_Expecter) DeleteFilters(ctx interface{}, filters interface{}) *MockORM_DeleteFilters_Call {
	return &MockORM_DeleteFilters_Call{Call: _e.mock.On("DeleteFilters", ctx, filters)}
}

func (_c *MockORM_DeleteFilters_Call) Run(run func(ctx context.Context, filters map[int64]Filter)) *MockORM_DeleteFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[int64]Filter))
	})
	return _c
}

func (_c *MockORM_DeleteFilters_Call) Return(_a0 error) *MockORM_DeleteFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockORM_DeleteFilters_Call) RunAndReturn(run func(context.Context, map[int64]Filter) error) *MockORM_DeleteFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx
func (_m *MockORM) GetLatestBlock(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockORM_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockORM_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockORM_Expecter) GetLatestBlock(ctx interface{}) *MockORM_GetLatestBlock_Call {
	return &MockORM_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx)}
}

func (_c *MockORM_GetLatestBlock_Call) Run(run func(ctx context.Context)) *MockORM_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockORM_GetLatestBlock_Call) Return(_a0 int64, _a1 error) *MockORM_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockORM_GetLatestBlock_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockORM_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// InsertFilter provides a mock function with given fields: ctx, filter
func (_m *MockORM) InsertFilter(ctx context.Context, filter Filter) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for InsertFilter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Filter) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Filter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockORM_InsertFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertFilter'
type MockORM_InsertFilter_Call struct {
	*mock.Call
}

// InsertFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter Filter
func (_e *MockORM_Expecter) InsertFilter(ctx interface{}, filter interface{}) *MockORM_InsertFilter_Call {
	return &MockORM_InsertFilter_Call{Call: _e.mock.On("InsertFilter", ctx, filter)}
}

func (_c *MockORM_InsertFilter_Call) Run(run func(ctx context.Context, filter Filter)) *MockORM_InsertFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Filter))
	})
	return _c
}

func (_c *MockORM_InsertFilter_Call) Return(id int64, err error) *MockORM_InsertFilter_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockORM_InsertFilter_Call) RunAndReturn(run func(context.Context, Filter) (int64, error)) *MockORM_InsertFilter_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLogs provides a mock function with given fields: _a0, _a1
func (_m *MockORM) InsertLogs(_a0 context.Context, _a1 []Log) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []Log) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockORM_InsertLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLogs'
type MockORM_InsertLogs_Call struct {
	*mock.Call
}

// InsertLogs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []Log
func (_e *MockORM_Expecter) InsertLogs(_a0 interface{}, _a1 interface{}) *MockORM_InsertLogs_Call {
	return &MockORM_InsertLogs_Call{Call: _e.mock.On("InsertLogs", _a0, _a1)}
}

func (_c *MockORM_InsertLogs_Call) Run(run func(_a0 context.Context, _a1 []Log)) *MockORM_InsertLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]Log))
	})
	return _c
}

func (_c *MockORM_InsertLogs_Call) Return(err error) *MockORM_InsertLogs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_InsertLogs_Call) RunAndReturn(run func(context.Context, []Log) error) *MockORM_InsertLogs_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFilterBackfilled provides a mock function with given fields: ctx, id
func (_m *MockORM) MarkFilterBackfilled(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkFilterBackfilled")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockORM_MarkFilterBackfilled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFilterBackfilled'
type MockORM_MarkFilterBackfilled_Call struct {
	*mock.Call
}

// MarkFilterBackfilled is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockORM_Expecter) MarkFilterBackfilled(ctx interface{}, id interface{}) *MockORM_MarkFilterBackfilled_Call {
	return &MockORM_MarkFilterBackfilled_Call{Call: _e.mock.On("MarkFilterBackfilled", ctx, id)}
}

func (_c *MockORM_MarkFilterBackfilled_Call) Run(run func(ctx context.Context, id int64)) *MockORM_MarkFilterBackfilled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockORM_MarkFilterBackfilled_Call) Return(err error) *MockORM_MarkFilterBackfilled_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_MarkFilterBackfilled_Call) RunAndReturn(run func(context.Context, int64) error) *MockORM_MarkFilterBackfilled_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFilterDeleted provides a mock function with given fields: ctx, id
func (_m *MockORM) MarkFilterDeleted(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkFilterDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockORM_MarkFilterDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFilterDeleted'
type MockORM_MarkFilterDeleted_Call struct {
	*mock.Call
}

// MarkFilterDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockORM_Expecter) MarkFilterDeleted(ctx interface{}, id interface{}) *MockORM_MarkFilterDeleted_Call {
	return &MockORM_MarkFilterDeleted_Call{Call: _e.mock.On("MarkFilterDeleted", ctx, id)}
}

func (_c *MockORM_MarkFilterDeleted_Call) Run(run func(ctx context.Context, id int64)) *MockORM_MarkFilterDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockORM_MarkFilterDeleted_Call) Return(err error) *MockORM_MarkFilterDeleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockORM_MarkFilterDeleted_Call) RunAndReturn(run func(context.Context, int64) error) *MockORM_MarkFilterDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// SelectFilters provides a mock function with given fields: ctx
func (_m *MockORM) SelectFilters(ctx context.Context) ([]Filter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SelectFilters")
	}

	var r0 []Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Filter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Filter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockORM_SelectFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectFilters'
type MockORM_SelectFilters_Call struct {
	*mock.Call
}

// SelectFilters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockORM_Expecter) SelectFilters(ctx interface{}) *MockORM_SelectFilters_Call {
	return &MockORM_SelectFilters_Call{Call: _e.mock.On("SelectFilters", ctx)}
}

func (_c *MockORM_SelectFilters_Call) Run(run func(ctx context.Context)) *MockORM_SelectFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockORM_SelectFilters_Call) Return(_a0 []Filter, _a1 error) *MockORM_SelectFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockORM_SelectFilters_Call) RunAndReturn(run func(context.Context) ([]Filter, error)) *MockORM_SelectFilters_Call {
	_c.Call.Return(run)
	return _c
}

// SelectSeqNums provides a mock function with given fields: ctx
func (_m *MockORM) SelectSeqNums(ctx context.Context) (map[int64]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SelectSeqNums")
	}

	var r0 map[int64]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int64]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int64]int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockORM_SelectSeqNums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectSeqNums'
type MockORM_SelectSeqNums_Call struct {
	*mock.Call
}

// SelectSeqNums is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockORM_Expecter) SelectSeqNums(ctx interface{}) *MockORM_SelectSeqNums_Call {
	return &MockORM_SelectSeqNums_Call{Call: _e.mock.On("SelectSeqNums", ctx)}
}

func (_c *MockORM_SelectSeqNums_Call) Run(run func(ctx context.Context)) *MockORM_SelectSeqNums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockORM_SelectSeqNums_Call) Return(_a0 map[int64]int64, _a1 error) *MockORM_SelectSeqNums_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockORM_SelectSeqNums_Call) RunAndReturn(run func(context.Context) (map[int64]int64, error)) *MockORM_SelectSeqNums_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockORM creates a new instance of MockORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockORM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockORM {
	mock := &MockORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
