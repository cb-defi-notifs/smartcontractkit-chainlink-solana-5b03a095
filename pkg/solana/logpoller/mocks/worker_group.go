// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	worker "github.com/smartcontractkit/chainlink-solana/pkg/solana/logpoller/worker"
)

// WorkerGroup is an autogenerated mock type for the WorkerGroup type
type WorkerGroup struct {
	mock.Mock
}

type WorkerGroup_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkerGroup) EXPECT() *WorkerGroup_Expecter {
	return &WorkerGroup_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: ctx, job
func (_m *WorkerGroup) Do(ctx context.Context, job worker.Job) error {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.Job) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerGroup_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type WorkerGroup_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - job worker.Job
func (_e *WorkerGroup_Expecter) Do(ctx interface{}, job interface{}) *WorkerGroup_Do_Call {
	return &WorkerGroup_Do_Call{Call: _e.mock.On("Do", ctx, job)}
}

func (_c *WorkerGroup_Do_Call) Run(run func(ctx context.Context, job worker.Job)) *WorkerGroup_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker.Job))
	})
	return _c
}

func (_c *WorkerGroup_Do_Call) Return(_a0 error) *WorkerGroup_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerGroup_Do_Call) RunAndReturn(run func(context.Context, worker.Job) error) *WorkerGroup_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkerGroup creates a new instance of WorkerGroup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerGroup(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerGroup {
	mock := &WorkerGroup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
