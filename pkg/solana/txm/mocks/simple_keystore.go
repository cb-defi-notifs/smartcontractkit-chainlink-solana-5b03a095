// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SimpleKeystore is an autogenerated mock type for the SimpleKeystore type
type SimpleKeystore struct {
	mock.Mock
}

type SimpleKeystore_Expecter struct {
	mock *mock.Mock
}

func (_m *SimpleKeystore) EXPECT() *SimpleKeystore_Expecter {
	return &SimpleKeystore_Expecter{mock: &_m.Mock}
}

// Accounts provides a mock function with given fields: ctx
func (_m *SimpleKeystore) Accounts(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Accounts")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleKeystore_Accounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accounts'
type SimpleKeystore_Accounts_Call struct {
	*mock.Call
}

// Accounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SimpleKeystore_Expecter) Accounts(ctx interface{}) *SimpleKeystore_Accounts_Call {
	return &SimpleKeystore_Accounts_Call{Call: _e.mock.On("Accounts", ctx)}
}

func (_c *SimpleKeystore_Accounts_Call) Run(run func(ctx context.Context)) *SimpleKeystore_Accounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SimpleKeystore_Accounts_Call) Return(accounts []string, err error) *SimpleKeystore_Accounts_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *SimpleKeystore_Accounts_Call) RunAndReturn(run func(context.Context) ([]string, error)) *SimpleKeystore_Accounts_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: ctx, account, data
func (_m *SimpleKeystore) Sign(ctx context.Context, account string, data []byte) ([]byte, error) {
	ret := _m.Called(ctx, account, data)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) ([]byte, error)); ok {
		return rf(ctx, account, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) []byte); ok {
		r0 = rf(ctx, account, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, account, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleKeystore_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type SimpleKeystore_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - data []byte
func (_e *SimpleKeystore_Expecter) Sign(ctx interface{}, account interface{}, data interface{}) *SimpleKeystore_Sign_Call {
	return &SimpleKeystore_Sign_Call{Call: _e.mock.On("Sign", ctx, account, data)}
}

func (_c *SimpleKeystore_Sign_Call) Run(run func(ctx context.Context, account string, data []byte)) *SimpleKeystore_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *SimpleKeystore_Sign_Call) Return(signature []byte, err error) *SimpleKeystore_Sign_Call {
	_c.Call.Return(signature, err)
	return _c
}

func (_c *SimpleKeystore_Sign_Call) RunAndReturn(run func(context.Context, string, []byte) ([]byte, error)) *SimpleKeystore_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewSimpleKeystore creates a new instance of SimpleKeystore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSimpleKeystore(t interface {
	mock.TestingT
	Cleanup(func())
}) *SimpleKeystore {
	mock := &SimpleKeystore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
