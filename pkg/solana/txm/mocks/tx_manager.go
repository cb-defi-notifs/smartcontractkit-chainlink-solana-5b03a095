// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	solana "github.com/gagliardetto/solana-go"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"

	utils "github.com/smartcontractkit/chainlink-solana/pkg/solana/txm/utils"
)

// TxManager is an autogenerated mock type for the TxManager type
type TxManager struct {
	mock.Mock
}

type TxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TxManager) EXPECT() *TxManager_Expecter {
	return &TxManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *TxManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type TxManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *TxManager_Expecter) Close() *TxManager_Close_Call {
	return &TxManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *TxManager_Close_Call) Run(run func()) *TxManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxManager_Close_Call) Return(_a0 error) *TxManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Close_Call) RunAndReturn(run func() error) *TxManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, accountID, tx, txID, txLastValidBlockHeight, txCfgs
func (_m *TxManager) Enqueue(ctx context.Context, accountID string, tx *solana.Transaction, txID *string, txLastValidBlockHeight uint64, txCfgs ...utils.SetTxConfig) error {
	_va := make([]interface{}, len(txCfgs))
	for _i := range txCfgs {
		_va[_i] = txCfgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountID, tx, txID, txLastValidBlockHeight)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *solana.Transaction, *string, uint64, ...utils.SetTxConfig) error); ok {
		r0 = rf(ctx, accountID, tx, txID, txLastValidBlockHeight, txCfgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type TxManager_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - tx *solana.Transaction
//   - txID *string
//   - txLastValidBlockHeight uint64
//   - txCfgs ...utils.SetTxConfig
func (_e *TxManager_Expecter) Enqueue(ctx interface{}, accountID interface{}, tx interface{}, txID interface{}, txLastValidBlockHeight interface{}, txCfgs ...interface{}) *TxManager_Enqueue_Call {
	return &TxManager_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx, accountID, tx, txID, txLastValidBlockHeight}, txCfgs...)...)}
}

func (_c *TxManager_Enqueue_Call) Run(run func(ctx context.Context, accountID string, tx *solana.Transaction, txID *string, txLastValidBlockHeight uint64, txCfgs ...utils.SetTxConfig)) *TxManager_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]utils.SetTxConfig, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(utils.SetTxConfig)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*solana.Transaction), args[3].(*string), args[4].(uint64), variadicArgs...)
	})
	return _c
}

func (_c *TxManager_Enqueue_Call) Return(_a0 error) *TxManager_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Enqueue_Call) RunAndReturn(run func(context.Context, string, *solana.Transaction, *string, uint64, ...utils.SetTxConfig) error) *TxManager_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionStatus provides a mock function with given fields: ctx, transactionID
func (_m *TxManager) GetTransactionStatus(ctx context.Context, transactionID string) (types.TransactionStatus, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionStatus")
	}

	var r0 types.TransactionStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.TransactionStatus, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.TransactionStatus); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(types.TransactionStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxManager_GetTransactionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionStatus'
type TxManager_GetTransactionStatus_Call struct {
	*mock.Call
}

// GetTransactionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID string
func (_e *TxManager_Expecter) GetTransactionStatus(ctx interface{}, transactionID interface{}) *TxManager_GetTransactionStatus_Call {
	return &TxManager_GetTransactionStatus_Call{Call: _e.mock.On("GetTransactionStatus", ctx, transactionID)}
}

func (_c *TxManager_GetTransactionStatus_Call) Run(run func(ctx context.Context, transactionID string)) *TxManager_GetTransactionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TxManager_GetTransactionStatus_Call) Return(_a0 types.TransactionStatus, _a1 error) *TxManager_GetTransactionStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxManager_GetTransactionStatus_Call) RunAndReturn(run func(context.Context, string) (types.TransactionStatus, error)) *TxManager_GetTransactionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// HealthReport provides a mock function with given fields:
func (_m *TxManager) HealthReport() map[string]error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthReport")
	}

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// TxManager_HealthReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthReport'
type TxManager_HealthReport_Call struct {
	*mock.Call
}

// HealthReport is a helper method to define mock.On call
func (_e *TxManager_Expecter) HealthReport() *TxManager_HealthReport_Call {
	return &TxManager_HealthReport_Call{Call: _e.mock.On("HealthReport")}
}

func (_c *TxManager_HealthReport_Call) Run(run func()) *TxManager_HealthReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxManager_HealthReport_Call) Return(_a0 map[string]error) *TxManager_HealthReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_HealthReport_Call) RunAndReturn(run func() map[string]error) *TxManager_HealthReport_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *TxManager) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TxManager_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type TxManager_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *TxManager_Expecter) Name() *TxManager_Name_Call {
	return &TxManager_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *TxManager_Name_Call) Run(run func()) *TxManager_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxManager_Name_Call) Return(_a0 string) *TxManager_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Name_Call) RunAndReturn(run func() string) *TxManager_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with given fields:
func (_m *TxManager) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type TxManager_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *TxManager_Expecter) Ready() *TxManager_Ready_Call {
	return &TxManager_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *TxManager_Ready_Call) Run(run func()) *TxManager_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TxManager_Ready_Call) Return(_a0 error) *TxManager_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Ready_Call) RunAndReturn(run func() error) *TxManager_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *TxManager) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type TxManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TxManager_Expecter) Start(_a0 interface{}) *TxManager_Start_Call {
	return &TxManager_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *TxManager_Start_Call) Run(run func(_a0 context.Context)) *TxManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TxManager_Start_Call) Return(_a0 error) *TxManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Start_Call) RunAndReturn(run func(context.Context) error) *TxManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxManager creates a new instance of TxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxManager {
	mock := &TxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
