// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package store

import ag_binary "github.com/gagliardetto/binary"

type NewTransmission struct {
	Timestamp uint64
	Answer    ag_binary.Int128
}

func (obj NewTransmission) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Answer` param:
	err = encoder.Encode(obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NewTransmission) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Answer`:
	err = decoder.Decode(&obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

type Round struct {
	RoundId   uint32
	Slot      uint64
	Timestamp uint32
	Answer    ag_binary.Int128
}

func (obj Round) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RoundId` param:
	err = encoder.Encode(obj.RoundId)
	if err != nil {
		return err
	}
	// Serialize `Slot` param:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Answer` param:
	err = encoder.Encode(obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Round) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RoundId`:
	err = decoder.Decode(&obj.RoundId)
	if err != nil {
		return err
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Answer`:
	err = decoder.Decode(&obj.Answer)
	if err != nil {
		return err
	}
	return nil
}

type Scope interface {
	isScope()
}

type scopeContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	Version         ScopeVersion
	Decimals        ScopeDecimals
	Description     ScopeDescription
	RoundData       ScopeRoundData
	LatestRoundData ScopeLatestRoundData
	Aggregator      ScopeAggregator
}

type ScopeVersion uint8

func (obj ScopeVersion) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ScopeVersion) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ScopeVersion) isScope() {}

type ScopeDecimals uint8

func (obj ScopeDecimals) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ScopeDecimals) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ScopeDecimals) isScope() {}

type ScopeDescription uint8

func (obj ScopeDescription) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ScopeDescription) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ScopeDescription) isScope() {}

type ScopeRoundData struct {
	RoundId uint32
}

func (obj ScopeRoundData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RoundId` param:
	err = encoder.Encode(obj.RoundId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ScopeRoundData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RoundId`:
	err = decoder.Decode(&obj.RoundId)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ScopeRoundData) isScope() {}

type ScopeLatestRoundData uint8

func (obj ScopeLatestRoundData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ScopeLatestRoundData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ScopeLatestRoundData) isScope() {}

type ScopeAggregator uint8

func (obj ScopeAggregator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ScopeAggregator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ScopeAggregator) isScope() {}
