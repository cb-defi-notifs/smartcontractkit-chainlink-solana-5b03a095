// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package log_read_test

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateLog is the `createLog` instruction.
type CreateLog struct {
	Value *uint64

	// [0] = [SIGNER] authority
	//
	// [1] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewCreateLogInstructionBuilder creates a new `CreateLog` instruction builder.
func NewCreateLogInstructionBuilder() *CreateLog {
	nd := &CreateLog{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetValue sets the "value" parameter.
func (inst *CreateLog) SetValue(value uint64) *CreateLog {
	inst.Value = &value
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CreateLog) SetAuthorityAccount(authority ag_solanago.PublicKey) *CreateLog {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CreateLog) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateLog) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateLog {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateLog) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

func (inst CreateLog) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateLog,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateLog) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateLog) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Value == nil {
			return errors.New("Value parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateLog) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateLog")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Value", *inst.Value))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice[1]))
					})
				})
		})
}

func (obj CreateLog) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateLog) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateLogInstruction declares a new CreateLog instruction with the provided parameters and accounts.
func NewCreateLogInstruction(
	// Parameters:
	value uint64,
	// Accounts:
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateLog {
	return NewCreateLogInstructionBuilder().
		SetValue(value).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
