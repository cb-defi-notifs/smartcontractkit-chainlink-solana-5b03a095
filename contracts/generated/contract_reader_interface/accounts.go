// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract_reader_interface

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type LookupTableDataAccount struct {
	Version              uint8
	Administrator        ag_solanago.PublicKey
	PendingAdministrator ag_solanago.PublicKey
	LookupTable          ag_solanago.PublicKey
}

var LookupTableDataAccountDiscriminator = [8]byte{220, 119, 44, 40, 237, 41, 223, 7}

func (obj LookupTableDataAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LookupTableDataAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Administrator` param:
	err = encoder.Encode(obj.Administrator)
	if err != nil {
		return err
	}
	// Serialize `PendingAdministrator` param:
	err = encoder.Encode(obj.PendingAdministrator)
	if err != nil {
		return err
	}
	// Serialize `LookupTable` param:
	err = encoder.Encode(obj.LookupTable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LookupTableDataAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LookupTableDataAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[220 119 44 40 237 41 223 7]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Administrator`:
	err = decoder.Decode(&obj.Administrator)
	if err != nil {
		return err
	}
	// Deserialize `PendingAdministrator`:
	err = decoder.Decode(&obj.PendingAdministrator)
	if err != nil {
		return err
	}
	// Deserialize `LookupTable`:
	err = decoder.Decode(&obj.LookupTable)
	if err != nil {
		return err
	}
	return nil
}

type DataAccount struct {
	Idx      uint64
	Bump     uint8
	U64Value uint64
	U64Slice []uint64
}

var DataAccountDiscriminator = [8]byte{85, 240, 182, 158, 76, 7, 18, 233}

func (obj DataAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DataAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Idx` param:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `U64Value` param:
	err = encoder.Encode(obj.U64Value)
	if err != nil {
		return err
	}
	// Serialize `U64Slice` param:
	err = encoder.Encode(obj.U64Slice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DataAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DataAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[85 240 182 158 76 7 18 233]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `U64Value`:
	err = decoder.Decode(&obj.U64Value)
	if err != nil {
		return err
	}
	// Deserialize `U64Slice`:
	err = decoder.Decode(&obj.U64Slice)
	if err != nil {
		return err
	}
	return nil
}
